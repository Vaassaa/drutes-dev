#                             _____________________  _______________________
#                             ___  __ \__  __ \_  / / /_  /___  ____/_  ___/
#                             __  / / /_  /_/ /  / / /_  __/_  __/  _____ \ 
#                             _  /_/ /_  _, _// /_/ / / /_ _  /___  ____/ / 
#                             /_____/ /_/ |_| \____/  \__/ /_____/  /____/  
#                                                                           
# 
#---------------------------------------------D R U t E S-----------------------------------------
#                             (Dual Richards' Unsaturated Equation Solver)
#
#------------------------- d r u t e s . c o n f / freeze/ freeze . c o n f -------------------
#-------------------------------------------------------------------------------------------------
#
#

#---how-to use constitutive relations? [integer]
# 0 - direct evaluation (not recommended, extremely resources consuming due to complicated exponential functions)
# 1 - function values are precalculated in program initialization and values between are linearly approximated

0

#length of interval for precaculating the constitutive functions in pressure head (!) (starting at zero)
700.0 

#discretization step for constitutive function precalculation
0.1

# number of layers (must be the same as defined for your mesh)
9
#

# Select Materials for each layer
# 1 - Soil
# 2 - Snow 

Snow
Snow
Snow
Snow
Snow
Snow
Snow
Snow
Snow

# Apply freezing point depression according to Dall amico (2011), but without approximation
# Options:
# 1 - Use freezing point depression
# 0 - Do not use freezing point depression
1


# Grain diameter per layer [L]
0.000940333
0.00069
0.000936
0.0007645
0.000874
0.00142925
0.000919
0.001571
0.0011025



#### Heat capacities [J.kg^-1.K^-1] for different phases
# C_solid: solid soil or ice if snow
# C_liquid: liquid water
# C_ice: frozen water or ice
# C_air: soil/snow air
###############
# C_solid      C_liquid     C_ice       C_air
2030           4185.5         2030       1000
2030           4185.5         2030       1000
2030           4185.5         2030       1000
2030           4185.5         2030       1000
2030           4185.5         2030       1000
2030           4185.5         2030       1000
2030           4185.5         2030       1000
2030           4185.5         2030       1000
2030           4185.5         2030       1000



#### Heat conductivty [W.m^-1.K^-1] for different phases
# lambda_solid: solid soil or ice if snow
# lambda_liquid: liquid water
# lambda_ice: frozen water or ice
# lambda_air: soil/snow air
###############
# lambda_solid      lambda_liquid     lambda_ice       lambda_air
2.23                   0.56        2.23               0.02
2.23                   0.56        2.23               0.02
2.23                   0.56        2.23               0.02
2.23                   0.56        2.23               0.02
2.23                   0.56        2.23               0.02
2.23                   0.56        2.23               0.02
2.23                   0.56        2.23               0.02
2.23                   0.56        2.23               0.02
2.23                   0.56        2.23               0.02

###################################################################################################
########################### pore system (liquid + air)
###################################################################################################
# Should air be considered to change temperature in equilibrium with liquid?
# Options
# 1 - yes 
# 0 - no (air's temperature remains equal to initial condition)
0

# initial temperature in each layer use [dg. C]
# value or choose input file in folder drutes.conf/freeze/Tini_l.in
# Options
# value
# input
input

# If value, enter initial temperature in each layer use [dg. C]
#6.7

##################################################################
#################### bc Temp (liquid + air) description ##############################
##################################################################

# number of boundaries (for 1D problem obviously not more then 2)
2

#list boundaries

# ID starts at 100 (for 1D problem 101 = bottom boundary, 102 = top boundary)
# available boundary types
# 0 - no bc for this domain
# 1 - Dirichlet boundary
# 2 - Neumann boundary (typically zero disperion flux (the same as boundary 0))ls
# 3 - flux due to coolant, e.g. Mizoguchi example, value is temperature of coolant in [deg C]
# 4 - provide a file for Dirichlet to Neumann switch, use bc.dat has to be y

# boundary ID       boundary type       use bc.dat [y/n]   value       
# 
#	
#------------------------------------------------------------------------------------------------------
101                         1               n                   0        
102                         4               y                   -6

#if boundary 3 was chosen, enter thermal conductivity hc of the heat exchange q = hc (Tcoolant-Tsoil)
# uncomment for other boundary types
#28

####################################################################################################
######################### solid system (soil or ice)
###################################################################################################
# initial temperature in each layer use [dg. C]
# value or choose input file in folder drutes.conf/freeze/Tini_s.in
# Options
# value
# input
input

# If value, enter initial temperature in each layer use [dg. C]
#6.7
##################################################################
#################### bc Temp (solid soil or ice) description ##############################
##################################################################

# number of boundaries (for 1D problem obviously not more then 2)
2

#list boundaries

# ID starts at 110 (for 1D problem 111 = bottom boundary, 112 = top boundary)
# available boundary types
# 0 - no bc for this domain
# 1 - Dirichlet boundary
# 2 - Neumann boundary (typically zero disperion flux (the same as boundary 0))
# 3 - flux due to coolant, e.g. Mizoguchi example, value is temperature of coolant in [deg C]
# 4 - provide a file for Dirichlet to Neumann switch

# boundary ID       boundary type       use bc.dat [y/n]   value       
# 
#	
#------------------------------------------------------------------------------------------------------
111                         1               n                   0        
102                         4               y                   -6


#if boundary 3 was chosen, enter thermal conductivity hc of the heat exchange q = hc (Tcoolant-Tsoil)
# uncomment for other boundary types
#28

##################################################################
#################### Water flow ##############################
##################################################################
# include flux due to temperature (e.g. qlT in saito et al 2006 or hansson et al 2004)
# Options:
# 1 - yes
# 0 - no 
0


# van Genuchten parameters, l is set to 0.5                                         	               
#      alpha [L-1]  |    n   |    m       | theta_r    | theta_s  
#-----------------------------------------1st layer------------------------------------------------- 
18.42084457	7.011508601	0.857377341	0	0.630248092
22.16596006	6.357385353	0.842702629	0	0.563794984
17.73713861	7.154712999	0.86023199	0	0.679661941
20.20411919	6.675502984	0.850198554	0	0.563794984
21.78503886	6.415503128	0.84412758	0	0.752993861
20.69351573	6.591578132	0.848291262	0	0.77230502
31.46960079	5.307380461	0.811583133	0	0.81824791
21.47183276	6.464539021	0.845309929	0	0.802092169
38.04535218	4.827515692	0.792854117	0	0.849549659


# Saturated Hydraulic conductivity
#anisothprophy description
# HINT: check number of records of anisothropy description in water.conf/matrix.conf!!
#       for 3D problem you must specify exactly Kxx, Kyy and Kzz values.
#       Obviously for 2D problem there must be exactly only Kxx and Kzz value, analogicaly for 1D problem
#        for 2D problem supply only 1 angle, for 3D problem supply 2 angles, and for 1D problem the angle value defines the angle between the VERTICAL and the flow trajectory (carefull some other 
#        softwares consider HORIZONTAL!!
#angle [degrees]  | K_11   |  K_22   | K_33
#-----------------------------------------------
0	0.06
0	0.06
0	0.08
0	0.05
0	0.17
0	0.16
0	0.41
0	0.19
0	0.61


# initial condition specified for each layer
# number of records must be equal to number of layers

# init. cond [real] | type of init. cond (hpres, H_tot, theta) 
##------------------------------------------------------------------------------

0.001     theta
0.001     theta
0.001     theta
0.001     theta
0.001     theta
0.001     theta
0.001     theta
0.001     theta
0.001     theta               
                 


##################################################################
#################### water bc description ##############################
##################################################################

# number of boundaries (for 1D problem obviously not more then 2)
2
#list boundaries

# ID starts at 100 (for 1D problem 121 = bottom boundary, 122 = top boundary)
# available boundary types
# 0 - no bc for this domain
# 1 - Dirichlet boundary
# -1 - Dirichlet boundary, the pressure is equal to vertical distance from the defined value
# 2 - Neumann boundary (e.g. rain)
# 3 - Free Drainage
# 4 - Seepage Face
# 5 - atmospheric boundary

# boundary ID       boundary type       use rain.dat [y/n]   value          
#----------------------------------------------------------------------------------------------------------------------------
121                       4                   n                	0    
122                       2                   y                	0
