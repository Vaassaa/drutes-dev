#                             _____________________  _______________________
#                             ___  __ \__  __ \_  / / /_  /___  ____/_  ___/
#                             __  / / /_  /_/ /  / / /_  __/_  __/  _____ \ 
#                             _  /_/ /_  _, _// /_/ / / /_ _  /___  ____/ / 
#                             /_____/ /_/ |_| \____/  \__/ /_____/  /____/  
#                                                                           
# 
#---------------------------------------------D R U t E S-----------------------------------------
#                             (Dual Richards' Unsaturated Equation Solver)
#
#------------------------- d r u t e s . c o n f / freeze/ freeze . c o n f -------------------
#-------------------------------------------------------------------------------------------------
#
#

#---how-to use constitutive relations? [integer]
# 0 - direct evaluation (not recommended, extremely resources consuming due to complicated exponential functions)
# 1 - function values are precalculated in program initialization and values between are linearly approximated

0

#length of interval for precaculating the constitutive functions in pressure head (!) (starting at zero)
700.0 

#discretization step for constitutive function precalculation
0.1

# number of layers (must be the same as defined for your mesh)
3
#

# Select Materials for each layer
# 1 - Soil
# 2 - Snow 

Snow
Snow
Snow

# Apply freezing point depression according to Dall amico (2011), but without approximation
# Options:
# 1 - Use freezing point depression
# 0 - Do not use freezing point depression
1

#### Heat capacities [J.kg^-1.K^-1] for different phases
# C_solid: solid soil or ice if snow
# C_liquid: liquid water
# C_ice: frozen water or ice
# C_air: soil/snow air
###############
# C_solid      C_liquid     C_ice       C_air
2117           4188         2117       1006
2117           4188         2117       1006
2117           4188         2117       1006

#### Thermal conductivity
# For snow: volumetric weighted sum of effective conductivty calculated with (Calonne et al. 2011) and water
# For soil: Extended Campbell (1985) described in Hansson et al. (2004)
#
# Snow set to 0 for each soil layer
# Dry snow density of each layer
170
235
210


# Soil set all values 0 for each snow layer
# Select values for each layer
# C1 [W.m^-1.K^-1]  | C2 [W.m^-1.K^-1] |   C3 [-] |   C4 [W.m^-1.K^-1] |   C5  [-] | F1  [-]  |  F2 [-] |  beta [m]
0.55                  0.8                   3.07           0.13            4           13.05     1.06      0.01
0.55                  0.8                   3.07           0.13            4           13.05     1.06      0.01
0.55                  0.8                   3.07           0.13            4           13.05     1.06      0.01

# initial temperature  use [dg. C]
# value or choose input file in folder drutes.conf/freeze/temp.ini
# Options
# value
# input
value


# If value, enter initial temperature in each layer use [dg. C]
0
0
0

##################################################################
#################### bc Temp description ##############################
##################################################################

# number of boundaries (for 1D problem obviously not more then 2)
2

#list boundaries

# ID starts at 100 (for 1D problem 101 = bottom boundary, 102 = top boundary)
# available boundary types
# 0 - no bc for this domain
# 1 - Dirichlet boundary
# 2 - Neumann boundary (typically zero disperion flux (the same as boundary 0))
# 3 - flux due to coolant, e.g. Mizoguchi example, value is temperature of coolant in [deg C]


# boundary ID       boundary type       use bc.dat [y/n]   value       
# 
#	
#------------------------------------------------------------------------------------------------------
101                         1               n                   0        
102                         4               y                   0

#if boundary 3 was chosen, enter thermal conductivity hc of the heat exchange q = hc (Tcoolant-Tsoil)
# uncomment for other boundary types
# 28

##################################################################
#################### Water flow ##############################
##################################################################

# include flux due to temperature (e.g. qlT in saito et al 2006 or hansson et al 2004)
# Options:
# 1 - yes
# 0 - no 
0

# van Genuchten parameters, l is set to 0.5                                         	               
#      alpha [L-1]  |    n   |    m       | theta_r    | theta_s  
#-----------------------------------------1st layer------------------------------------------------- 
33	             5.2	     0.81  	    0.02	      0.81 
70	             3.6	     0.72  	    0.02	      0.74 
79	             3.4	     0.71  	    0.02	      0.77 


# Saturated Hydraulic conductivity
#anisothprophy description
# HINT: check number of records of anisothropy description in water.conf/matrix.conf!!
#       for 3D problem you must specify exactly Kxx, Kyy and Kzz values.
#       Obviously for 2D problem there must be exactly only Kxx and Kzz value, analogicaly for 1D problem
#        for 2D problem supply only 1 angle, for 3D problem supply 2 angles, and for 1D problem the angle value defines the angle between the VERTICAL and the flow trajectory (carefull some other 
#        softwares consider HORIZONTAL!!
#angle [degrees]  | K_11   |  K_22   | K_33
#-----------------------------------------------
0	               0.45
0	               1.75
0	               2.42


# initial condition specified for each layer
# number of records must be equal to number of layers

# init. cond [real] | type of init. cond (hpres, H_tot, theta) 
##------------------------------------------------------------------------------

0.06 theta                     
0.04 theta                     
0.074 theta                    


##################################################################
#################### water bc description ##############################
##################################################################

# number of boundaries (for 1D problem obviously not more then 2)
2
#list boundaries

# ID starts at 100 (for 1D problem 121 = bottom boundary, 122 = top boundary)
# available boundary types
# 0 - no bc for this domain
# 1 - Dirichlet boundary
# -1 - Dirichlet boundary, the pressure is equal to vertical distance from the defined value
# 2 - Neumann boundary (e.g. rain)
# 3 - Free Drainage
# 4 - Seepage Face
# 5 - atmospheric boundary

# boundary ID       boundary type       use rain.dat [y/n]   value          
#----------------------------------------------------------------------------------------------------------------------------
121                       3                   n                	0    
122                       2                   y                	0
